import { IConnectionManager } from "./interfaces";
/**
 * Provides a client proxy that wraps a Service definition generated by staticly compiled Protobuf definition.
 */
export declare class PbServiceProxy<T> {
    protected conn: IConnectionManager;
    protected serviceName: string;
    /**
     * @coonstructor
     * @param conn - Connection manager to handle outbound requests
     * @param serviceName
     */
    constructor(conn: IConnectionManager, serviceName: string);
    /**
     *
     * @param svc Create and activate an instance of a service
     */
    activate(svc: any, async?: any): T;
    /**
     * Provides handler logic for RPC sender. Note: use of arrow function
     * required to maintain instance context.
     *
     * @param method
     * @param requestData
     * @param callback
     */
    protected sendRpcImpl: (method: any, requestData: any, callback: any) => void;
    /**
     * Provides handler logic for RPC sender. Note: use of arrow function
     * required to maintain instance context.
     *
     * @param method
     * @param requestData
     * @param callback
     */
    protected sendRpcImplAsync: (method: any, requestData: any, callback: any) => void;
}
export default PbServiceProxy;
